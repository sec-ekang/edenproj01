pipeline {
    // Defines the agent and tools for the pipeline
    agent any

    // Defines environment variables
    environment {
        REPO_USER = 'sec-ekang'
        REPO_NAME = 'sock-shop_front-end'
        REPO = "${REPO_USER}/${REPO_NAME}"              // Repository name (github)
        DOCKER_HUB_USER   = 'edenkang'                       // Your Docker Hub username
        APP_NAME          = 'lab02-frontend'                // Application identifier (Docker Hub)
        GITHUB_CREDENTIAL_ID = 'sec-ekang-lab2'
        DOCKERHUB_CREDENTIAL_ID = 'dockerhub_lab2'
        SLACK_TITLE = 'Lab02-Frontend-CI'
        
        // Dynamically get the Git tag (version)
        IMAGE_NAME        = "${DOCKER_HUB_USER}/${APP_NAME}"  // Docker Hub image name
    }

    // Configures global options for the pipeline
    options {
        buildDiscarder(logRotator(numToKeepStr: '20')) // Keeps the last 20 builds
        disableConcurrentBuilds()                      // Prevents overlapping runs
        timestamps()                                   // Adds timestamps to console output
        ansiColor('xterm')                             // Enables colored logs
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        dir('front-end') {
                            checkout([$class: 'GitSCM', 
                                branches: [[name: 'master']],
                                userRemoteConfigs: [[credentialsId: "${env.GITHUB_CREDENTIAL_ID}", url: "https://github.com/${env.REPO}.git"]]
                            ])
                            // Dynamically get the Git tag (version) after checkout
                            def gitTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                            env.IMAGE_TAG = gitTag
                        }
                    } catch (err) {
                        env.FAILED_STEP = 'Checkout'
                        throw err
                    }
                }
            }
        }

        stage('Install & Cache Dependencies') {
            steps {
                script {
                    try {
                        dir('front-end') {
                            // Removed cache block due to 'hashFiles' error; consider installing Pipeline Utility Steps Plugin if caching is desired.
                            nodejs('NodeJS 16') { // Replace 'NodeJS 16' with the name you configured in Global Tool Configuration
                                sh 'npx yarn install --frozen-lockfile' // Use npx to run yarn
                            }
                        }
                    } catch (err) {
                        env.FAILED_STEP = 'Install & Cache Dependencies'
                        throw err
                    }
                }
            }
        }

        stage('Lint & Unit Tests') {
            steps {
                script {
                    try {
                        dir('front-end') {
                            nodejs('NodeJS 16') { // Replace 'NodeJS 16' with the name you configured in Global Tool Configuration
                                sh 'npm run lint'
                                // Adapted for mocha which is used in this project
                                sh 'npm test'
                            }
                        }
                    } catch (err) {
                        env.FAILED_STEP = 'Lint & Unit Tests'
                        throw err
                    }
                }
            }
            post {
                always {
                    dir('front-end') {
                        // Archive JUnit report
                        junit 'junit.xml'
                    }
                }
            }
        }
     
        stage('Remove Previous Docker Image') {
            steps {
                script {
                    try {
                        // Find and stop/remove containers using any tag of the image
                        def containers = sh(script: "docker ps -a -q --filter ancestor=${IMAGE_NAME}", returnStdout: true).trim()
                        if (containers) {
                            echo "Found containers from previous builds to remove:\n${containers}"
                            sh "docker stop ${containers.replaceAll('\\n', ' ')} || true"
                            sh "docker rm ${containers.replaceAll('\\n', ' ')} || true"
                            echo "Stopped and removed old containers."
                        } else {
                            echo "No containers found for ${IMAGE_NAME}."
                        }

                        // Find and remove all tags of the image
                        def images = sh(script: "docker images -q ${IMAGE_NAME}", returnStdout: true).trim()
                        if (images) {
                            echo "Found previous images for ${IMAGE_NAME} to remove:\n${images}"
                            sh "docker rmi -f ${images.replaceAll('\\n', ' ')} || true"
                            echo "Deleted previous Docker images."
                        } else {
                            echo "No Docker images found for ${IMAGE_NAME}."
                        }
                    } catch (err) {
                        env.FAILED_STEP = 'Remove Previous Docker Image'
                        throw err
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    try {
                        // Builds and pushes Docker images
                        def fullImage   = "${DOCKER_HUB_USER}/${APP_NAME}:${env.IMAGE_TAG}"
                        def latestImage = "${DOCKER_HUB_USER}/${APP_NAME}:latest"

                        dir('front-end') {
                            // Primes the layer cache
                            sh "docker pull ${latestImage} || true"
                            // Builds images
                            sh "docker build --cache-from=${latestImage} -t ${fullImage} -t ${latestImage} ."
                            // sh "docker build --no-cache -t ${fullImage} -t ${latestImage} ."

                            // Pushes to the Docker registry
                            docker.withRegistry('https://index.docker.io/v1/', "${env.DOCKERHUB_CREDENTIAL_ID}") {
                                sh "docker push ${fullImage}"
                                sh "docker push ${latestImage}"
                            }
                        }
                    } catch (err) {
                        env.FAILED_STEP = 'Docker Build & Push'
                        throw err
                    }
                }
            }
        }

        stage('Trigger Test01 Pipeline') {
            steps {
                script {
                    try {
                        build job: 'Lab02-Frontend-cd', parameters: [[$class: 'StringParameterValue', name: 'IMAGE_TAG', value: env.IMAGE_TAG]]
                    } catch (err) {
                        env.FAILED_STEP = 'Trigger Test01 Pipeline'
                        throw err
                    }
                }
            }
        }
    }

    post {
        always {
            // Cleans up the workspace and old images
            cleanWs()
            //sh 'docker image prune -a -f --filter "until=24h"'
            sh 'docker container prune -f'
            sh 'docker system prune -a -f --volumes'
        }
        success {
            // Sends a success notification
            slackSend(
                channel: '#lab02',
                color: 'good',
                message: "âœ… `${SLACK_TITLE}:${env.IMAGE_TAG}` succeeded!"
            )
        }
        failure {
            // Sends a failure notification
            slackSend(
                channel: '#lab02',
                color: 'danger',
                message: "ðŸš¨ `${SLACK_TITLE}:${env.IMAGE_TAG}` failed at stage: `${env.FAILED_STEP ?: env.STAGE_NAME}`"
            )
        }
    }
}