# Stage 1: Build using Go toolset (modules)
FROM registry.access.redhat.com/ubi9/go-toolset:latest as builder

# Set working directory for Go
WORKDIR /go/src/github.com/microservices-demo/catalogue/

# Copy source code (expect it in build context)
COPY . .

# Build application statically (no CGO)
RUN CGO_ENABLED=0 GOOS=linux go build -mod=readonly -a -installsuffix cgo -o /app ./cmd/cataloguesvc

# Stage 2: Minimal runtime
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

ENV SERVICE_USER=myuser \
    SERVICE_UID=10001 \
    SERVICE_GROUP=mygroup \
    SERVICE_GID=10001

# Install only essential runtime packages
RUN microdnf update -y \
    && microdnf install -y ca-certificates tzdata \
    && groupadd -r -g ${SERVICE_GID} ${SERVICE_GROUP} \
    && useradd -r -u ${SERVICE_UID} -g ${SERVICE_GROUP} -m -d /home/${SERVICE_USER} -s /sbin/nologin ${SERVICE_USER}

WORKDIR /opt

# Copy built binary from builder stage
COPY --from=builder /app /opt/app

# If your app uses images, copy them; else, skip the next line
# COPY --from=builder /go/src/github.com/microservices-demo/catalogue/images/ /images/

RUN chown -R ${SERVICE_USER}:${SERVICE_GROUP} /opt/app

USER ${SERVICE_USER}

EXPOSE 8080

CMD ["/opt/app", "-port=8080"]