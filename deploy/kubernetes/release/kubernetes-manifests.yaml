# Updated on 8 June 2025 by Eden
# --------------------------
# front-end Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: front-end
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: front-end
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: front-end
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: front-end
    spec:
      containers:
        - name: front-end
          image: "weaveworksdemos/front-end:0.3.12"
          imagePullPolicy: IfNotPresent
          env:
            - name: SESSION_REDIS
              value: "session-db:6379"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# front-end HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: front-end-hpa
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: front-end
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: front-end
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# --------------------------
# front-end Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: front-end
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: front-end
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8079"
spec:
  type: NodePort
  ports:
    - name: front-end
      port: 80
      targetPort: 8079
      nodePort: 30001
  selector:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# carts Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: carts
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: carts
    spec:
      containers:
        - name: carts
          image: "weaveworksdemos/carts:0.4.8"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: "-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false"
          resources:
            requests:
              cpu: "100m"
              memory: "200Mi"
            limits:
              cpu: "300m"
              memory: "500Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# carts HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: carts-hpa
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: carts
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: carts
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# --------------------------
# carts Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: carts
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: carts
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  type: ClusterIP
  ports:
    - name: carts
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# carts-db StatefulSet
# --------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: carts-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: carts-db
spec:
  serviceName: carts-db
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: carts-db
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: carts-db
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: carts-db
    spec:
      containers:
        - name: carts-db
          image: "mongo:4.2"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 27017
              name: carts-db
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
          livenessProbe:
            exec:
              command: ["mongo", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["mongo", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: carts-db
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/component: carts-db
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
# --------------------------
# carts-db Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: carts-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: carts-db
    role: service
spec:
  type: ClusterIP
  ports:
    - name: carts-db
      port: 27017
      targetPort: 27017
  selector:
    app.kubernetes.io/name: carts-db
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# orders Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: orders
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: orders
    spec:
      containers:
        - name: orders
          image: "weaveworksdemos/orders:0.4.7"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: "-Xms128m -Xmx256m -XX:+UseG1GC"
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# orders HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orders-hpa
  namespace: sock-shop
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orders
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# --------------------------
# orders Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: orders
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: orders
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  type: ClusterIP
  ports:
    - name: orders
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# order-db StatefulSet
# --------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: order-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: order-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: order-db
spec:
  serviceName: order-db
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: order-db
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: order-db
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: order-db
    spec:
      containers:
        - name: order-db
          image: "mongo:4.2"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 27017
              name: order-db
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
          livenessProbe:
            exec:
              command: ["mongo","--eval","db.adminCommand('ping')"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["mongo","--eval","db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: order-db
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/component: order-db
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
# --------------------------
# order-db Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: order-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: order-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: order-db
    role: service
spec:
  type: ClusterIP
  ports:
    - name: order-db
      port: 27017
      targetPort: 27017
  selector:
    app.kubernetes.io/name: order-db
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# payment Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: payment
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: payment
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: payment
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: payment
    spec:
      containers:
        - name: payment
          image: "weaveworksdemos/payment:0.4.3"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: "-Xms64m -Xmx128m"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "300m"
              memory: "256Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# payment HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: payment-hpa
  namespace: sock-shop
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: payment
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
---
# --------------------------
# payment Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: payment
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: payment
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: payment
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  type: ClusterIP
  ports:
    - name: payment
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: payment
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# user Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: user
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: user
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: user
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: user
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: user
    spec:
      containers:
        - name: user
          image: "weaveworksdemos/user:0.4.7"
          imagePullPolicy: IfNotPresent
          env:
            - name: MONGO_HOST
              value: "user-db:27017"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "300m"
              memory: "256Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# user HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-hpa
  namespace: sock-shop
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# --------------------------
# user Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: user
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: user
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: user
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  type: ClusterIP
  ports:
    - name: user
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: user
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# user-db StatefulSet
# --------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: user-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: user-db
spec:
  serviceName: user-db
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: user-db
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: user-db
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io-component: user-db
    spec:
      containers:
        - name: user-db
          image: "mongo:4.2"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 27017
              name: user-db
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
          livenessProbe:
            exec:
              command: ["mongo","--eval","db.adminCommand('ping')"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["mongo","--eval","db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: user-db
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/component: user-db
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
# --------------------------
# user-db Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: user-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: user-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: user-db
    role: service
spec:
  type: ClusterIP
  ports:
    - name: user-db
      port: 27017
      targetPort: 27017
  selector:
    app.kubernetes.io/name: user-db
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# shipping Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: shipping
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: shipping
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: shipping
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: shipping
    spec:
      containers:
        - name: shipping
          image: "weaveworksdemos/shipping:0.4.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: "-Xms64m -Xmx128m"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "300m"
              memory: "256Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# shipping HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: shipping-hpa
  namespace: sock-shop
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: shipping
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# --------------------------
# shipping Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: shipping
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: shipping
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: shipping
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  type: ClusterIP
  ports:
    - name: shipping
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: shipping
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# catalogue Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: catalogue
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: catalogue
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: catalogue
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalogue
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: catalogue
    spec:
      containers:
        - name: catalogue
          image: "weaveworksdemos/catalogue:0.3.5"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# catalogue HPA
# --------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: catalogue-hpa
  namespace: sock-shop
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: catalogue
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# --------------------------
# catalogue Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: catalogue
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: catalogue
    role: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  type: ClusterIP
  ports:
    - name: catalogue
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: catalogue
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# catalogue-db StatefulSet
# --------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: catalogue-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: catalogue-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: catalogue-db
spec:
  serviceName: catalogue-db
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: catalogue-db
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalogue-db
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io-component: catalogue-db
    spec:
      containers:
        - name: catalogue-db
          image: "mongo:4.2"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 27017
              name: catalogue-db
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
          livenessProbe:
            exec:
              command: ["mongo","--eval","db.adminCommand('ping')"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["mongo","--eval","db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: catalogue-db
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io-component: catalogue-db
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
# --------------------------
# catalogue-db Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: catalogue-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: catalogue-db
    role: service
spec:
  type: ClusterIP
  ports:
    - name: catalogue-db
      port: 27017
      targetPort: 27017
  selector:
    app.kubernetes.io/name: catalogue-db
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# rabbitmq StatefulSet
# --------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io-component: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io.instance: RELEASE-NAME
        app.kubernetes.io-component: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: "rabbitmq:3.7.8-management"
          imagePullPolicy: IfNotPresent
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: "user"
            - name: RABBITMQ_DEFAULT_PASS
              value: "password"
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          ports:
            - containerPort: 5672
              name: amqp
            - containerPort: 9090
              name: exporter
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
          livenessProbe:
            exec:
              command: ["rabbitmqctl","status"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["rabbitmqctl","status"]
            initialDelaySeconds: 10
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/component: rabbitmq
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
# --------------------------
# rabbitmq Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io-component: rabbitmq
    role: service
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: exporter
      port: 9090
      targetPort: 9090
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# queue-master Deployment
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: queue-master
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io-component: queue-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: queue-master
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: queue-master
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io-component: queue-master
    spec:
      containers:
        - name: queue-master
          image: "weaveworksdemos/queue-master:0.3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: "-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "300m"
              memory: "256Mi"
          ports:
            - containerPort: 80
              name: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop: ["all"]
              add: ["NET_BIND_SERVICE"]
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
---
# --------------------------
# queue-master Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: queue-master
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io-component: queue-master
    role: service
spec:
  type: ClusterIP
  ports:
    - name: queue-master
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: queue-master
    app.kubernetes.io/instance: RELEASE-NAME
---
# --------------------------
# session-db StatefulSet
# --------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: session-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: session-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io-component: session-db
spec:
  serviceName: session-db
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: session-db
      app.kubernetes.io-instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: session-db
        app.kubernetes.io-instance: RELEASE-NAME
        app.kubernetes.io-component: session-db
    spec:
      containers:
        - name: session-db
          image: "redis:5.0.4"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 6379
              name: redis
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop: ["all"]
              add: ["CHOWN","SETGID","SETUID"]
            readOnlyRootFilesystem: true
          livenessProbe:
            exec:
              command: ["redis-cli","ping"]
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["redis-cli","ping"]
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        beta.kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: session-db
          app.kubernetes.io-instance: RELEASE-NAME
          app.kubernetes.io-component: session-db
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 1Gi
---
# --------------------------
# session-db Service
# --------------------------
apiVersion: v1
kind: Service
metadata:
  name: session-db
  namespace: sock-shop
  labels:
    app.kubernetes.io/name: session-db
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io-component: session-db
    role: service
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
  selector:
    app.kubernetes.io/name: session-db
    app.kubernetes.io-instance: RELEASE-NAME